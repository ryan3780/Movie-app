{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","_ref2","poster","alt","react_default","a","createElement","src","title","className","MovieGenre","_ref3","genre","Movie","_ref","genres","synopsis","map","index","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","_renderMovies","_this","movies","movie","src_Movie","title_english","medium_cover_image","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","this","fetch","then","response","json","data","catch","err","console","log","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wUAyDA,SAASA,EAATC,GAAsC,IAAfC,EAAeD,EAAfC,OAAQC,EAAOF,EAAPE,IAC3B,OACIC,EAAAC,EAAAC,cAAA,OAAMC,IAAKL,EAAQC,IAAKA,EAAKK,MAAOL,EAAKM,UAAU,iBAI3D,SAASC,EAATC,GAA+B,IAATC,EAASD,EAATC,MAClB,OACIR,EAAAC,EAAAC,cAAA,QAAMG,UAAU,eAAeG,GAoBxBC,MAhEf,SAAAC,GAAoD,IAAnCN,EAAmCM,EAAnCN,MAAON,EAA4BY,EAA5BZ,OAAQa,EAAoBD,EAApBC,OAAQC,EAAYF,EAAZE,SACpC,OACIZ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,SACXL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACXL,EAAAC,EAAAC,cAACN,EAAD,CAAaE,OAAQA,EAAQC,IAAKK,KAEtCJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACXL,EAAAC,EAAAC,cAAA,UAAKE,GACLJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACVM,EAAOE,IAAI,SAACL,EAAOM,GAAR,OAAkBd,EAAAC,EAAAC,cAACI,EAAD,CAAYE,MAAOA,EAAOO,IAAKD,OAEjEd,EAAAC,EAAAC,cAAA,OAAKG,UAAU,mBACXL,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CACIgB,KAAML,EACNM,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,gBCcjBC,6MA7CbC,MAAQ,KAMRC,cAAgB,WAWd,OAVeC,EAAKF,MAAMG,OAAOb,IAAI,SAAAc,GACnC,OACE3B,EAAAC,EAAAC,cAAC0B,EAAD,CACExB,MAAOuB,EAAME,cACb/B,OAAQ6B,EAAMG,mBACdf,IAAKY,EAAMI,GACXpB,OAAQgB,EAAMhB,OACdC,SAAUe,EAAMf,gBAMxBoB,gCAAa,SAAAC,IAAA,IAAAP,EAAA,OAAAQ,EAAAjC,EAAAkC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUb,EAAKc,WADf,OACLb,EADKU,EAAAI,KAEXf,EAAKgB,SAAS,CACZf,WAHS,wBAAAU,EAAAM,SAAAT,EAAAU,WAObJ,SAAW,WACT,OAAOK,MAAM,yDACVC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAE1BF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKtB,SACvBuB,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,yFA7B5BP,KAAKX,8CAgCE,IACCN,EAAWiB,KAAKpB,MAAhBG,OACR,OACE1B,EAAAC,EAAAC,cAAA,OAAKG,UAAWqB,EAAS,MAAQ,gBAC9BA,EAASiB,KAAKnB,gBAAkB,kBAzCvB6B,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,KAAK,SAAAsB,GACjCA,EAAaC","file":"static/js/main.a78b8678.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Movie.css';\nimport LinesEllipsis from 'react-lines-ellipsis'\n\n// class Movie extends Component {\n//     static propTypes = {\n//         title: PropTypes.string.isRequired,\n//         poster: PropTypes.string.isRequired,\n//     }\n//     render() {\n//         // console.log(this.props);\n//         return (\n//             <div>\n//                 <MoviePoster poster={this.props.poster} />\n//                 <h1>{this.props.title}</h1>\n//             </div>\n//         )\n//     }\n// }\n// 위에 클래스와 아래 덤브(멍청한, state가 없는)는 같은 기능을 한다.\nfunction Movie({ title, poster, genres, synopsis }) {\n    return (\n        <div className=\"Movie\">\n            <div className=\"Movie__Column\">\n                <MoviePoster poster={poster} alt={title} />\n            </div>\n            <div className=\"Movie__Column\">\n                <h1>{title}</h1>\n                <div className=\"Movie__Genres\">\n                    {genres.map((genre, index) => <MovieGenre genre={genre} key={index} />)}\n                </div>\n                <div className=\"Movie__Synopsis\">\n                    <LinesEllipsis\n                        text={synopsis}\n                        maxLine='3'\n                        ellipsis='...'\n                        trimRight\n                        basedOn='letters'\n                    />\n                </div>\n            </div>\n        </div>\n    )\n}\n\n// class MoviePoster extends Component {\n//     static propTypes = {\n//         poster: PropTypes.string.isRequired\n//     }\n//     render() {\n//         return (\n//             <img src={this.props.poster} alt=\"Movie Poster\" />\n//         )\n//     }\n// }\n// 위에 클래스와 아래 덤브(멍청한, state가 없는)는 같은 기능을 한다.\nfunction MoviePoster({ poster, alt }) {\n    return (\n        < img src={poster} alt={alt} title={alt} className=\"Movie_Poster\" />\n    )\n}\n\nfunction MovieGenre({ genre }) {\n    return (\n        <span className=\"Movie_Genre\">{genre}</span>\n    )\n}\n\n\nMovie.propTypes = {\n    title: PropTypes.string.isRequired,\n    poster: PropTypes.string.isRequired,\n    genres: PropTypes.array.isRequired,\n    synopsis: PropTypes.string.isRequired\n}\n\nMoviePoster.propTypes = {\n    poster: PropTypes.string.isRequired,\n    alt: PropTypes.string.isRequired\n}\n\nMovieGenre.propTypes = {\n    genre: PropTypes.string.isRequired\n}\nexport default Movie","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from './Movie';\n\n\nclass App extends Component {\n\n  state = {}\n\n  componentDidMount() {\n    this._getMovies();\n  }\n\n  _renderMovies = () => {\n    const movies = this.state.movies.map(movie => {\n      return (\n        <Movie\n          title={movie.title_english}\n          poster={movie.medium_cover_image}\n          key={movie.id}\n          genres={movie.genres}\n          synopsis={movie.synopsis} />\n      )\n    })\n    return movies\n  }\n\n  _getMovies = async () => {\n    const movies = await this._callApi() //movies에 await 모드로 _callApi함수를 가지고 있다.\n    this.setState({\n      movies\n    })\n  }\n\n  _callApi = () => {\n    return fetch('https://yts.am/api/v2/list_movies.json?sort_by=rating') // api를 평점순으로 가져오는 방법\n      .then(response => response.json())// 위에가 끝나면 여기 시작해라. then()은 fetch의 결과물만을 받는다. \n      //.json을 하면 json 형식으로 data를 바꿔준다\n      .then(json => json.data.movies)\n      .catch(err => console.log(err))\n  }\n\n  render() {\n    const { movies } = this.state;\n    return (\n      <div className={movies ? \"App\" : \"App--loading\"}>\n        {movies ? this._renderMovies() : \"Loading\"}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}